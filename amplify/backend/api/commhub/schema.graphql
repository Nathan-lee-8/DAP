type User @model @auth(
    rules: [
      { allow: owner }, 
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  email: AWSEmail! @index(name: "byEmail", queryField: "userByEmail")
  firstname: String
  lastname: String
  phonenumber: String
  profileURL: String
  location: AWSIPAddress
  posts: [Post] @hasMany
  followings: [Following] @hasMany
  chats: [UserChat] @hasMany
  messages: [Message] @hasMany
}

type Post @model @auth(
    rules: [
      { allow: owner },
      { allow: public, operations: [read] }
    ]
  ) { 
  id: ID!
  title: String!
  content: String!
  type: String! @index(name: "postsByDate", queryField: "postsByDate", sortKeyFields: ["createdAt"])
  createdAt: AWSDateTime!
  userID: ID!
  user: User @belongsTo(fields:["userID"])
}

type Following @model @auth(
    rules: [
      { allow: owner },
      { allow: public, operations: [read] }
    ]
  ) { 
  id: ID!
  userID: ID! @index(name: "followingsByUser", queryField: "followingsByUser", sortKeyFields: ["followedAt"])
  followedUserID: ID!
  followedUser: User @belongsTo(fields: ["followedUserID"])
  followedAt: AWSDateTime!
}

type UserChat @model @auth(
    rules: [
      { allow: owner, ownerField: "ownerID" },
      { allow: private, operations: [create, read] }
    ]
  ) {
  id: ID!
  ownerID: ID!
  chatName: String!
  userID: ID! @index(name: "chatsByUser", queryField: "chatsByUser", sortKeyFields: ["joinedAt"])
  user: User @belongsTo(fields: ["userID"])
  chatID: ID! @index(name: "UserChatByChat", sortKeyFields: ["joinedAt"])
  chat: Chat @belongsTo(fields: ["chatID"])
  joinedAt: AWSDateTime!
  unreadMessageCount: Int 
  lastReadAt: AWSDateTime
  isMuted: Boolean
}

type Chat @model @auth(
    rules: [
      { allow: owner, ownerField: "participantIDs" },
      { allow: private, operations: [create, read] }
    ]
  ) { 
  id: ID!
  name: String!
  isGroup: Boolean!
  createdAt: AWSDateTime! 
  participantIDs: [ID!]!
  messages: [Message] @hasMany(indexName:"messagesByChat", fields: ["id"])
  participants: [UserChat] @hasMany(indexName:"UserChatByChat", fields: ["id"])
}

type Message @model @auth(
    rules: [
      { allow: owner },
      { allow: private, operations: [ read] }
    ]
  ) {
  id: ID!
  content: String!
  senderID: ID! @index(name: "messagesByUser", queryField: "messagesByUser", sortKeyFields: ["createdAt"])
  sender: User @belongsTo(fields: ["senderID"])
  chatID: ID! @index(name: "messagesByChat", queryField: "messagesByChat", sortKeyFields: ["createdAt"])
  chat: Chat @belongsTo(fields: ["chatID"])
  createdAt: AWSDateTime!
}