type User @model @auth(
  rules: [
    { allow: owner },
    { allow: private, operations: [read]},
    { allow: public, operations: [read]}
  ]
) {
  id: ID!
  email: AWSEmail! @index(name: "byEmail", queryField: "userByEmail")
  firstname: String
  lastname: String
  profileURL: String
  posts: [Post] @hasMany
  chats: [UserChat] @hasMany
  messages: [Message] @hasMany
  groups: [UserGroup] @hasMany
  comments: [Comment] @hasMany
}

type Post @model @auth(
  rules: [
    { allow: owner },
    { allow: private, operations: [read]},
    { allow: public, operations: [read] }
  ]
) { 
  id: ID!
  title: String!
  content: String!
  postURL: [String]
  groupID: ID! @index(name: "postsByDate", queryField: "postsByDate", sortKeyFields: ["createdAt"])
  userID: ID! @index(name: "postsByUser", queryField: "postsByUser", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields:["userID"])
  group: Group @belongsTo(fields: ["groupID"])
  comments: [Comment] @hasMany(indexName:"commentsByPost", fields: ["id"])
  createdAt: AWSDateTime!
}

type Comment @model @auth(
  rules: [
    {allow: owner},
    {allow: private, operations: [read]},
    {allow: public, operations: [read]}
  ]
) {
  id: ID!
  content: String!
  commentURL: [String]
  userID: ID! @index(name:"commentsByUser", queryField: "commentsByUser", sortKeyFields: ["createdAt"])
  postID: ID! @index(name:"commentsByPost", queryField: "commentsByPost", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields:["userID"])
  post: Post @belongsTo(fields:["postID"])
  createdAt: AWSDateTime!
}

type UserChat @model @auth(
  rules: [
    { allow: owner, ownerField: "ownerID" },
    { allow: private }
  ]
) {
  id: ID!
  ownerID: ID!
  unreadMessageCount: Int 
  lastMessage: String
  lastReadAt: AWSDateTime
  isMuted: Boolean
  userID: ID! @index(name: "chatsByUser", queryField: "chatsByUser", sortKeyFields: ["createdAt"])
  chatID: ID! @index(name: "UserChatByChat", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields: ["userID"])
  chat: Chat @belongsTo(fields: ["chatID"])
  createdAt: AWSDateTime!
}

type Chat @model @auth(
  rules: [
      { allow: private, operations: [create, read] }
    ]
) { 
  id: ID!
  name: String!
  isGroup: Boolean!
  messages: [Message] @hasMany(indexName:"messagesByChat", fields: ["id"])
  participants: [UserChat] @hasMany(indexName:"UserChatByChat", fields: ["id"])
  createdAt: AWSDateTime!
}

type Message @model @auth(
  rules: [
    { allow: owner },
    { allow: private, operations: [ read] }
  ]
) {
  id: ID!
  content: String!
  msgURL: [String]
  senderID: ID! @index(name: "messagesByUser", queryField: "messagesByUser", sortKeyFields: ["createdAt"])
  chatID: ID! @index(name: "messagesByChat", queryField: "messagesByChat", sortKeyFields: ["createdAt"])
  sender: User @belongsTo(fields: ["senderID"])
  chat: Chat @belongsTo(fields: ["chatID"])
  createdAt: AWSDateTime!
}

type UserGroup @model @auth(
  rules: [
    { allow: owner, ownerField: "ownerID" },
    { allow: private}
  ]
) {
  id: ID!
  ownerID: ID!
  userID: ID! @index(name: "groupsByUser", queryField: "groupsByUser", sortKeyFields: ["createdAt"])
  groupID: ID! @index(name: "membersByGroup", queryField: "membersByGroup")
  role: String
  user: User @belongsTo(fields: ["userID"])
  group: Group @belongsTo(fields: ["groupID"])
  createdAt: AWSDateTime!
}

type Group @model @auth(
  rules: [
    { allow: private}
  ]
) {
  id: ID!
  groupName: String!
  groupURL: String
  description: String
  members: [UserGroup] @hasMany(indexName:"membersByGroup", fields: ["id"])
  posts: [Post] @hasMany(indexName:"postsByDate", fields: ["id"])
  createdAt: AWSDateTime!
}