type User @model @auth(
  rules: [
    { allow: owner },
    { allow: private, operations: [read] },
    { allow: public, operations: [read, update] }
  ]
) {
  id: ID!
  email: AWSEmail! @index(name: "byEmail", queryField: "userByEmail")
  firstname: String!
  lastname: String!
  fullname: String!
  profileURL: String!
  description: String
  unreadChatCount: Int!
  unreadNotificationCount: Int!
  posts: [Post] @hasMany
  chats: [UserChat] @hasMany
  messages: [Message] @hasMany
  groups: [UserGroup] @hasMany
  comments: [Comment] @hasMany
  replies: [Reply] @hasMany
  notifications: [Notification] @hasMany
  fcmTokens: [Token] @hasMany
  notificationSettings: NotificationSettings @hasOne(fields:["id"])
}

type UserFeed @model @auth(
  rules: [
    { allow: owner },
    { allow: private, operations: [read] },
    { allow: public, operations: [read] }
  ]
) {
  id: ID!
  userID: ID! @index(name:"postsByUserFeed", queryField: "postsByUserFeed", sortKeyFields: ["postCreatedAt"])
  postID: ID! @index(name: "userFeedByPostID", queryField: "userFeedByPostID")
  post: Post @hasOne(fields: ["postID"])
  postCreatedAt: AWSDateTime!
  createdAt: AWSDateTime!
}

type Post @model @auth(
  rules: [
    { allow: owner },
    { allow: private },
    { allow: public, operations: [read] }
  ]
) { 
  id: ID!
  content: String!
  postURL: [String]
  groupID: ID! @index(name: "postsByDate", queryField: "postsByDate", sortKeyFields: ["createdAt"])
  userID: ID! @index(name: "postsByUser", queryField: "postsByUser", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields:["userID"])
  group: Group @belongsTo(fields: ["groupID"])
  comments: [Comment] @hasMany(indexName:"commentsByPost", fields: ["id"])
  commentCount: Int! 
  createdAt: AWSDateTime!
}

type Comment @model @auth(
  rules: [
    { allow: owner },
    { allow: private },
    { allow: public, operations: [read] }
  ]
) {
  id: ID!
  content: String!
  commentURL: [String]
  userID: ID! @index(name:"commentsByUser", queryField: "commentsByUser", sortKeyFields: ["createdAt"])
  postID: ID! @index(name:"commentsByPost", queryField: "commentsByPost", sortKeyFields: ["createdAt"])
  replies: [Reply] @hasMany(indexName: "repliesByComment", fields: ["id"])
  user: User @belongsTo(fields:["userID"])
  post: Post @belongsTo(fields:["postID"])
  createdAt: AWSDateTime!
}

type Reply @model @auth(
  rules: [
    { allow: owner },
    { allow: private },
    { allow: public, operations: [read] }
  ]
) {
  id: ID!
  content: String!
  url: [String]
  userID: ID! @index(name:"repliesByUser", queryField: "repliesByUser", sortKeyFields: ["createdAt"])
  commentID: ID! @index(name: "repliesByComment", queryField: "repliesByComment", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields:["userID"])
  comment: Comment @belongsTo(fields:["commentID"])
  createdAt: AWSDateTime!
}

type UserChat @model @auth(
  rules: [
    { allow: owner },
    { allow: private }
  ]
) {
  id: ID!
  unreadMessageCount: Int!
  lastMessage: String!
  role: String!
  isMuted: Boolean
  userID: ID! @index(name: "chatsByUser", queryField: "chatsByUser", sortKeyFields: ["lastMessageAt"])
  chatID: ID! @index(name: "UserChatByChat", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields: ["userID"])
  chat: Chat @belongsTo(fields: ["chatID"])
  lastMessageAt: AWSDateTime!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Chat @model @auth(
  rules: [
      { allow: owner },
      { allow: private }
    ]
) { 
  id: ID!
  name: String!
  url: String
  isGroup: Boolean!
  messages: [Message] @hasMany(indexName:"messagesByChat", fields: ["id"])
  participants: [UserChat] @hasMany(indexName:"UserChatByChat", fields: ["id"])
  createdAt: AWSDateTime!
}

type Message @model @auth(
  rules: [
    { allow: owner },
    { allow: private }
  ]
) {
  id: ID!
  content: String!
  msgURL: [String]
  type: String
  senderID: ID! @index(name: "messagesByUser", queryField: "messagesByUser", sortKeyFields: ["createdAt"])
  chatID: ID! @index(name: "messagesByChat", queryField: "messagesByChat", sortKeyFields: ["createdAt"])
  sender: User @belongsTo(fields: ["senderID"])
  chat: Chat @belongsTo(fields: ["chatID"])
  createdAt: AWSDateTime!
}

type UserGroup @model @auth(
  rules: [
    { allow: owner },
    { allow: private }
  ]
) {
  id: ID!
  userID: ID! @index(name: "groupsByUser", queryField: "groupsByUser", sortKeyFields: ["updatedAt"])
  groupID: ID! @index(name: "membersByGroup", queryField: "membersByGroup")
  role: String
  user: User @belongsTo(fields: ["userID"])
  group: Group @belongsTo(fields: ["groupID"])
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Group @model @auth(
  rules: [
    { allow: owner },
    { allow: private }
  ]
) {
  id: ID!
  groupName: String!
  nameLowercase: String!
  groupURL: String
  description: String
  isPublic: Boolean!
  memberCount: Int!
  type: String! @index(name: "groupsByMemberCount", queryField: "groupsByMemberCount", sortKeyFields: ["memberCount"])
  members: [UserGroup] @hasMany(indexName:"membersByGroup", fields: ["id"])
  notifications: [Notification] @hasMany(indexName:"notificationsByGroup", fields: ["id"])
  posts: [Post] @hasMany(indexName:"postsByDate", fields: ["id"])
  createdAt: AWSDateTime!
}

type Notification @model @auth(
  rules: [
    { allow: owner },
    { allow: private },
    { allow: public, operations: [create] }
  ]
) { 
  id: ID!
  type: String!
  name: String!
  content: String!
  userID: ID! @index(name: "notificationsByUser", queryField: "notificationsByUser", sortKeyFields: ["createdAt"])
  groupID: ID @index(name: "notificationsByGroup", queryField: "notificationsByGroup", sortKeyFields: ["createdAt"])
  targetUserID: ID
  onClickID: ID!
  read: Boolean
  user: User @belongsTo(fields:["userID"])
  group: Group @belongsTo(fields:["groupID"])
  targetUser: User @belongsTo(fields: ["targetUserID"])
  createdAt: AWSDateTime!
}

type Report @model @auth(
  rules: [
    { allow: owner }
  ]
) { 
  id: ID!
  reporterID: String!
  reportedItemID: String!
  reportedItemType: String!
  reason: String!
  message: String!
}

type Token @model @auth(
  rules: [
    { allow: owner },
    { allow: private }
  ]
) { 
  id: ID!
  tokenID: String!
  userID: ID! @index(name: "tokensByUser", queryField: "tokensByUser", sortKeyFields: ["createdAt"])
  user: User @belongsTo(fields:["userID"])
  createdAt: AWSDateTime!
}

type NotificationSettings @model @auth(
  rules:[
    { allow: owner },
    { allow: private }
  ]
){
  id: ID!
  newPost: Boolean!
  joinGroup: Boolean!
  groupRequest: Boolean!
  newComment: Boolean!
  newReply: Boolean!
  newReplyComment: Boolean!
  newMessage: Boolean!
  joinChat: Boolean!
  userID: ID! @index(name: "notificationSettingsByUser", queryField: "notificationSettingsByUser")
  user: User @belongsTo(fields:["userID"])
  createdAt: AWSDateTime!
}